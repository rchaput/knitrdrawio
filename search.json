[{"path":"https://rchaput.github.io/knitrdrawio/articles/headless.html","id":"motivations","dir":"Articles","previous_headings":"","what":"Motivations","title":"Using headless environments (Docker)","text":"feels natural intuitive use knitrdrawio part Continuous Integration / Continuous Deployment (CI/CD) workflow, example automatically document book, time push commit. However, CI/CD typically runs headless environment, server without graphical display, /Docker containers. knitrdrawio requires additional dependencies work environments, known limitations draw.io executable. Electron-based application, draw.io expects requires graphical display, needs tricked thinking one available. Note: system mis-configured, knitrdrawio might believe headless environment, complain! case, must make sure $DISPLAY environment variable correctly set, knitrdrawio (, importantly, drawio ) may find display. particular, $DISPLAY variable empty, certainly problem.","code":""},{"path":"https://rchaput.github.io/knitrdrawio/articles/headless.html","id":"how-to","dir":"Articles","previous_headings":"","what":"How to","title":"Using headless environments (Docker)","text":"Two methods available: first one simply requires additional system dependencies setup (knitrdrawio handle internally) ; second one requires dependencies additional setup. methods require install system following dependencies: xvfb: virtual display server behaves “true” graphical display connected. Read man page. libgbm1 libasound2: libraries drawio include requires. system dependencies can simply installed distribution’s package manager, e.g., apt Ubuntu Debian-derivatives systems. Please check package manager appropriate packages, name might differ. Also, strongly recommended use [drawio v16.0.0][drawio16], using knitrdrawio CI/CD headless environment. Later versions drawio (16.0.2) ship Electron 16.x.x, seems problem D-Bus.","code":""},{"path":"https://rchaput.github.io/knitrdrawio/articles/headless.html","id":"simple-method","dir":"Articles","previous_headings":"How to","what":"Simple method","title":"Using headless environments (Docker)","text":"Step 1. Simply install required dependencies xvfb, libgbm1, libasound2. Step 2. Profit. knitrdrawio automatically detect headless environment, invoke drawio correct arguments use xvfb.","code":""},{"path":"https://rchaput.github.io/knitrdrawio/articles/headless.html","id":"performance-focused-method","dir":"Articles","previous_headings":"How to","what":"“Performance”-focused method","title":"Using headless environments (Docker)","text":"previous method advantage simple requiring additional setup, except dependencies. However, might overhead due knitrdrawio internally invoking xvfb-run time diagram must rendered. number diagrams grows, overhead might become noticeable. avoid , method creates virtual server knitrdrawio launched, makes virtual server used diagrams. Thus, overhead starting virtual server paid . Step 1. Install required dependencies. Step 2. rendering document knitr rmarkdown, choose display number, must unique machine (usually 99 work). Set $DISPLAY environment variable :<number>, e.g., export DISPLAY=:99 (forget : part). Start virtual server Xvfb &. Step 3. can now render document. virtual server background process make drawio believe graphical display available. complete workflow look like , assuming Ubuntu distribution:","code":"sudo apt update sudo apt install xvfb libgbm1 libasound2 export DISPLAY=:99 Xvfb & R -e 'rmarkdown::render(\"my_document.Rmd\")'"},{"path":"https://rchaput.github.io/knitrdrawio/articles/knitrdrawio.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Using knitrdrawio","text":"knitrdrawio package adds drawio engine knitr, can used automatically export draw.io diagrams images code chunks RMarkdown (Rmd) documents. can thus include diagrams’ source files process produce diagrams computational documents.","code":""},{"path":"https://rchaput.github.io/knitrdrawio/articles/knitrdrawio.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Using knitrdrawio","text":"knitrdrawio available GitHub, must therefore use remotes, devtools install . Using remotes: knitrdrawio also needs draw.io desktop app installed system, can download directly GitHub releases.","code":"install.packages(\"remotes\") remotes::install_github(\"rchaput/knitdrawio\")"},{"path":[]},{"path":"https://rchaput.github.io/knitrdrawio/articles/knitrdrawio.html","id":"loading-the-package","dir":"Articles","previous_headings":"Usage","what":"Loading the package","title":"Using knitrdrawio","text":"knitrdrawio must loaded Rmd document order knitr recognize new engine. Simply add code chunk somewhere beginning document: include library(knitrdrawio) line use drawio chunk, knitr complain produce following warning: Warning get_engine(options$engine) : Unknown language engine ‘drawio’ (must registered via knit_engines$set()). addition, chunk (thus diagram) rendered.","code":"```{r} library(knitrdrawio) ```"},{"path":"https://rchaput.github.io/knitrdrawio/articles/knitrdrawio.html","id":"rendering-a-diagram","dir":"Articles","previous_headings":"Usage","what":"Rendering a diagram","title":"Using knitrdrawio","text":"produce diagram within Rmd document, put new chunk using drawio engine, .e., setting drawio first word inside brackets: example, diag1 label, name, diagram. name used knitr progress report console, log messages, well filename produced diagram. specify , knitr generate one label , unnamed-chunk-1, works fine, makes harder identify file corresponds diagram. src chunk option relative knitrdrawio mandatory: specifies path source diagram, usually .drawio file. previous code chunk, assuming source file exists, correct diagram, document rendered, knitrdrawio automatically call draw.io render diagram. resulting image included document, following example shows:","code":"```{drawio diag1, src = \"/path/to/diagram.drawio\"} ```"},{"path":"https://rchaput.github.io/knitrdrawio/articles/knitrdrawio.html","id":"adding-options","dir":"Articles","previous_headings":"","what":"Adding options","title":"Using knitrdrawio","text":"knitrdrawio supports many options control behaviour. export process can controlled options, quite similar offered draw.io exporting diagram desktop app. options include ability crop document, choose page index export, add border, etc. chunk included document can controlled several knitr options. Note knitrdrawio tested options, might work.","code":""},{"path":"https://rchaput.github.io/knitrdrawio/articles/knitrdrawio.html","id":"drawio-specific-options","dir":"Articles","previous_headings":"Adding options","what":"Drawio-specific options","title":"Using knitrdrawio","text":"list chunk options can used knitrdrawio, draw.io equivalent, default values left unspecified. example, page.range option can used : details, please see draw.io command line help, drawio --help.","code":"```{drawio diag-with-page-range, src = \"/path/to/diagram.drawio\", page.range = \"2..4\"} ``` kable(data.frame(   option = c(\"src\", \"format\", \"crop\", \"transparent\", \"border\", \"page.index\", \"page.range\"),   equivalent = c(\"`input file`\", \"-f --format\", \"--crop\", \"-t --transparent\", \"-b --border\", \"-p --page-index\", \"-g --page-range\"),   desc = c(\"Path to the source diagram to export, usually a .drawio, .xml, or .vsdx file.\", \"Export format to use. Possible values are: pdf, png, jpg, svg, vsdx, xml.\", \"Whether to crop resulting image to diagram size.\", \"Set transparent background for PNG.\", \"Set border width around diagram. Non-zero values show the border, 0 to disable border.\", \"Select a specific page to export.\", \"Similar to page.index, but selecting a range instead. For PDF only. Usage: from..to\"),   default = c(\"(Mandatory argument)\", \"Depends on document output format: latex => pdf, html => svg, other => png\", \"TRUE\", \"FALSE\", \"0\", \"If output format is an image => 1st page, otherwise => all pages are exported.\", \"NULL\")   ),   col.names = c(\"Chunk option\", \"Drawio equivalent\", \"Description\", \"Default value\"))"},{"path":"https://rchaput.github.io/knitrdrawio/articles/knitrdrawio.html","id":"knitr-options","dir":"Articles","previous_headings":"Adding options","what":"Knitr options","title":"Using knitrdrawio","text":"knitrdrawio uses knitr chunks, thus rely chunk options. list options interest .","code":""},{"path":"https://rchaput.github.io/knitrdrawio/articles/knitrdrawio.html","id":"labelling-the-diagram-chunk","dir":"Articles","previous_headings":"Adding options > Knitr options","what":"Labelling the diagram chunk","title":"Using knitrdrawio","text":"label chunk option controls name given resulting image. default, knitr set label left unspecified, unnamed-chunk-1, makes harder identify file corresponds diagram. addition, chunk rendering fails, harder identify log diagrams error. Note knitr allows special syntax option, label= part can skipped. Thus, instead writing {drawio label=diag1}, use examples simpler {drawio diag1}.","code":""},{"path":"https://rchaput.github.io/knitrdrawio/articles/knitrdrawio.html","id":"naming-and-referencing-the-diagram-figure","dir":"Articles","previous_headings":"Adding options > Knitr options","what":"Naming and referencing the diagram figure","title":"Using knitrdrawio","text":"diagram included image Rmd document, can named referenced just like images, setting “figure caption” option fig.cap. Depending document output format, caption appear somewhere near figure, e.g., , , margin. See example following chunk result: example workflow. Note: time writing, possible split chunk option line. means long fig.cap can hard read. Fortunately, knitr proposes alternative syntax, based YAML, specify chunk options chunk . See following chunk example:","code":"```{drawio test-fig-cap, src = \"workflow.drawio\", fig.cap = \"An example workflow.\"} ``` ```{drawio test-fig-cap-long, src = \"workflow.drawio\"} #| fig.cap: >   A very, very long sentence that shows how we can use YAML syntax to write   long figure captions directly in the chunk itself. ```"},{"path":"https://rchaput.github.io/knitrdrawio/articles/knitrdrawio.html","id":"setting-the-path-to-drawio","dir":"Articles","previous_headings":"Adding options > Knitr options","what":"Setting the path to drawio","title":"Using knitrdrawio","text":"cases, knitrdrawio able find installation draw.io. However, reason detection fails, knitrdrawio work, print error message, prompting manually set path draw.io chunk options, setting engine.path option. can set directly chunks, rather cumbersome ; recommend setting chunks, using knitr::opts_chunks$set function. , place following code chunk beginning document (may chunk used load knitrdrawio):","code":"knitr::opts_chunks$set(engine.path = list(   drawio = \"/path/to/your/draw.io\" ))"},{"path":"https://rchaput.github.io/knitrdrawio/articles/knitrdrawio.html","id":"change-the-figure-folder","dir":"Articles","previous_headings":"Adding options > Knitr options","what":"Change the figure folder","title":"Using knitrdrawio","text":"default, knitrdrawio produce diagrams folder knitr uses figures (diagrams special kind figure). folder can controlled fig.path option. example, want create diagram figures/diagrams folder, may use: Non-existing directories automatically created necessary.","code":"```{drawio diag2, src = \"/path/to/diagram.drawio\", fig.path = \"figures/diagrams\"} ```"},{"path":"https://rchaput.github.io/knitrdrawio/articles/knitrdrawio.html","id":"cache-the-result","dir":"Articles","previous_headings":"Adding options > Knitr options","what":"Cache the result","title":"Using knitrdrawio","text":"Exporting diagram can long operation, especially size diagram grows. avoid losing much time, knitrdrawio may use caching mechanism knitr, set cache chunk option TRUE. case, produced diagram kept, associated hash key, determines whether diagram rebuilt . hash key invalidated : source diagram changes ; chunk changed.","code":""},{"path":"https://rchaput.github.io/knitrdrawio/articles/knitrdrawio.html","id":"evaluate-andor-include-the-diagram","dir":"Articles","previous_headings":"Adding options > Knitr options","what":"Evaluate and/or include the diagram","title":"Using knitrdrawio","text":"knitr chunks, may choose whether evaluate /include drawio chunk, setting respectively eval include options. eval set FALSE, chunk executed, diagram rendered. may useful know error diagram, wish crash Rmd document. include set FALSE, diagram rendered, corresponding file created figures directory, figure included Rmd document. may useful want manually insert later, simply produce diagram available disk, actually use .","code":""},{"path":"https://rchaput.github.io/knitrdrawio/articles/knitrdrawio.html","id":"setting-manually-the-drawio-arguments","dir":"Articles","previous_headings":"Adding options > Knitr options","what":"Setting manually the drawio arguments","title":"Using knitrdrawio","text":"can manually pass additional command-line arguments draw.io binary, setting standard engine.opts option. Although drawio arguments handled knitrdrawio’s options, useful one cases covered. Note can set option globally knitr::chunks_opt$set function, exactly engine.path option.","code":""},{"path":[]},{"path":"https://rchaput.github.io/knitrdrawio/articles/knitrdrawio.html","id":"error-recovery-behaviour","dir":"Articles","previous_headings":"Adding options > Other options","what":"Error-recovery behaviour","title":"Using knitrdrawio","text":"draw.io binary encounters error, knitrdrawio may try recover immediately stop whole document rendering. behaviour controlled .error chunk option, may specify either specific chunk, chunks using knitr::opts_chunks$set method. following values recognized: stop (default): Raise informative error, abort process. Usually (depending knitr’s configuration ), stop document rendering. prevents generating document missing wrongly exported diagram. skip: Raise informative warning, skip current diagram. diagram included document, document rendering goes . continue: Raise informative warning, still try include diagram document. draw.io explicitly signal errors, method can used error falsely reported. However, please note knitr likely fail diagram used (e.g., image generated)!","code":""},{"path":"https://rchaput.github.io/knitrdrawio/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"remy chaput. Maintainer.","code":""},{"path":"https://rchaput.github.io/knitrdrawio/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chaput R (2022). knitrdrawio: Drawio Engine Knitr. R package version 0.2.1, https://github.com/rchaput/knitrdrawio/.","code":"@Manual{,   title = {knitrdrawio: Drawio Engine for Knitr},   author = {Remy Chaput},   year = {2022},   note = {R package version 0.2.1},   url = {https://github.com/rchaput/knitrdrawio/}, }"},{"path":"https://rchaput.github.io/knitrdrawio/index.html","id":"drawio-engine-for-knitr","dir":"","previous_headings":"","what":"Drawio Engine for Knitr","title":"Drawio Engine for Knitr","text":"Author: rchaput <rchaput.pro@gmail.com>","code":""},{"path":"https://rchaput.github.io/knitrdrawio/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Drawio Engine for Knitr","text":"package adds drawio engine knitr, can used automatically export draw.io diagrams images code chunks RMarkdown documents.","code":""},{"path":"https://rchaput.github.io/knitrdrawio/index.html","id":"preview","dir":"","previous_headings":"","what":"Preview","title":"Drawio Engine for Knitr","text":"Preview code chunk (Rmd) PDF result","code":""},{"path":"https://rchaput.github.io/knitrdrawio/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Drawio Engine for Knitr","text":"package available GitHub, therefore need install remotes first: Alternatively, can also use devtools: Note package requires knitr package (already writing Rmd documents). also requires installed system draw.io binary.","code":"# Install the remotes package to install packages directly from GitHub install.packages(\"remotes\") # Now, install the knitrdrawio package from GitHub remotes::install_github(\"rchaput/knitrdrawio\") install.packages(\"devtools\") devtools::install_github(\"rchaput/knitrdrawio\")"},{"path":"https://rchaput.github.io/knitrdrawio/index.html","id":"on-docker-ci-etc","dir":"","previous_headings":"Installation","what":"On Docker (CI, etc.)","title":"Drawio Engine for Knitr","text":"Draw.io requires slightly different setup headless environments (without graphical server), Docker containers particular Continuous Integration workflows. following 2 points important cases: xvfb-run binary must available system. Linux distributions, can obtained installing xvfb package distribution’s package manager (apt, rpm, …). Note: xvfb-run provides virtual graphical server required draw.io function. knitrdrawio automatically encapsulate calls draw.io headless environment detected xvfb-run present. Alternatively, one can set $DISPLAY environment variable (virtual) graphical server. strongly recommended install draw.io 16.0.0. Note: recent versions draw.io ship Electron 16.x, seems problem D-Bus, making draw.io crash headless environments.","code":""},{"path":"https://rchaput.github.io/knitrdrawio/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Drawio Engine for Knitr","text":"First, load package code chunk, preferably beginning Rmd document: , can use draw.io diagrams Rmd document using code chunks drawio engine: Note code part chunk empty (nothing header). can customize export process using chunk options. previous example, src option specified: mandatory option sets source diagram export. document processed knitr, code chunk replaced resulting image.","code":"```{r setup, include=FALSE} library(knitr) library(knitrdrawio) ``` ```{drawio my-super-diag1, src=\"path/to/my-diag.drawio\"} ```"},{"path":"https://rchaput.github.io/knitrdrawio/index.html","id":"chunk-options","dir":"","previous_headings":"","what":"Chunk options","title":"Drawio Engine for Knitr","text":"Several chunk options available help export diagram exactly want.","code":""},{"path":"https://rchaput.github.io/knitrdrawio/index.html","id":"drawio-specific-options","dir":"","previous_headings":"Chunk options","what":"Drawio-specific options","title":"Drawio Engine for Knitr","text":"following options directly based draw.io available options (can get using draw.io --help command-line interface):","code":""},{"path":"https://rchaput.github.io/knitrdrawio/index.html","id":"basic-knitr-options","dir":"","previous_headings":"Chunk options","what":"Basic Knitr options","title":"Drawio Engine for Knitr","text":"options defined knitr can also used, list important ones. full list can found documentation ; however, tested knitrdrawio. label: meaningful value given option, used name resulting image. default, knitr set label specified, might harder identify. Note knitr allows skip label= part specific option, examples see {drawio <label>}. engine.path: default, package try find draw.io executable sane default location, depending OS, executable found, can set option override . Alternatively, can set option global level: engine.opts: can manually set additional command-line arguments given draw.io. Although draw.io arguments handled engine’s options, useful one use cases covered. eval: Set FALSE completely disable chunk. Nothing executed, diagram exported. include: Set FALSE disable inclusion result Rmd document. chunk still executed, diagram exported image file system, appear document. useful want automatically export diagrams, manually include images. cache: Set TRUE cache chunk execution. chunk re-executed long chunk options diagram source file’s checksum stay . fig.path: prefix path resulting image written. Useful , e.g., writing figures figure/ directory. Non-existing directories created.","code":"```{r setup} knitr::opts_chunks$set(engine.path = list(     drawio = \"/path/to/your/draw.io\" )) ```"},{"path":"https://rchaput.github.io/knitrdrawio/index.html","id":"other-options","dir":"","previous_headings":"Chunk options","what":"Other options","title":"Drawio Engine for Knitr","text":"stop (default) abort, raise informative error, stop document rendering. skip raise informative warning, skip current diagram. continue: raise informative warning, let knitr try include diagram document. method proposed since draw.io explicitly signal error, thus error detection report false positive. case, continue method can used. However, recommended general: knitr fail diagram can found!","code":""},{"path":"https://rchaput.github.io/knitrdrawio/reference/drawio.default.path.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Drawio executable — drawio.default.path","title":"Find the Drawio executable — drawio.default.path","text":"function tries find path drawio executable, assuming default installation, well-known location, depending OS.","code":""},{"path":"https://rchaput.github.io/knitrdrawio/reference/drawio.default.path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the Drawio executable — drawio.default.path","text":"","code":"drawio.default.path()  drawio.default.path.linux()  drawio.default.path.darwin()  drawio.default.path.windows()"},{"path":"https://rchaput.github.io/knitrdrawio/reference/drawio.default.path.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Find the Drawio executable — drawio.default.path","text":"drawio.default.path.linux: Find default path Linux drawio.default.path.darwin: Find default path Darwin (Mac OS X) drawio.default.path.windows: Find default path Windows","code":""},{"path":"https://rchaput.github.io/knitrdrawio/reference/drawio.default.path.html","id":"overriding-the-default-path","dir":"Reference","previous_headings":"","what":"Overriding the default path","title":"Find the Drawio executable — drawio.default.path","text":"function used return default path, specific path given user. , machine, drawio available default path, OS successfully identified, please specify custom location using engine.path option. option can set two manners. Either locally, single chunk, setting code chunk header: globally, chunks, beginning RMardown document. Note , case, specify list engines (case use engines, Python Ruby):","code":"{drawio mylabel, engine.path = \"/path/to/drawio\"} knitr::opts_chunks$set(engine.path = list(   drawio = \"/path/to/drawio\",   # Set here your other engines (if necessary)   python = \"/path/to/python\", ))"},{"path":"https://rchaput.github.io/knitrdrawio/reference/drawio.default.path.html","id":"linux","dir":"Reference","previous_headings":"","what":"Linux","title":"Find the Drawio executable — drawio.default.path","text":"Linux, executable first searched directories specified PATH environment variable, Sys.function. executable found PATH, search well-known (common) locations: /bin ; /usr/bin ; /opt/drawio.","code":""},{"path":"https://rchaput.github.io/knitrdrawio/reference/drawio.default.path.html","id":"macos","dir":"Reference","previous_headings":"","what":"MacOS","title":"Find the Drawio executable — drawio.default.path","text":"Mac OS X (Darwin), executable first searched directories specified PATH environment variable, Sys.function. executable found PATH, search well-known (common) locations: /Applications ; ~/Applications ; ~/bin ; /bin ; /usr/bin ; /usr/local/bin ; /opt/drawio.","code":""},{"path":"https://rchaput.github.io/knitrdrawio/reference/drawio.default.path.html","id":"windows","dir":"Reference","previous_headings":"","what":"Windows","title":"Find the Drawio executable — drawio.default.path","text":"Windows, executable first searched directories specified PATH environment variable, Sys.function.","code":""},{"path":"https://rchaput.github.io/knitrdrawio/reference/drawio.engine.html","id":null,"dir":"Reference","previous_headings":"","what":"Drawio engine for knitr — drawio.engine","title":"Drawio engine for knitr — drawio.engine","text":"function called knitr code chunk's engine set drawio. engine uses draw.io software export diagrams images, outputs image RMarkdown document.","code":""},{"path":"https://rchaput.github.io/knitrdrawio/reference/drawio.engine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drawio engine for knitr — drawio.engine","text":"","code":"drawio.engine(options)"},{"path":"https://rchaput.github.io/knitrdrawio/reference/drawio.engine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drawio engine for knitr — drawio.engine","text":"options chunk options. Please refer official knitr documentation details . Several important options package also described documentation parse.options","code":""},{"path":"https://rchaput.github.io/knitrdrawio/reference/drawio.engine.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Drawio engine for knitr — drawio.engine","text":"function normally used directly user, rather called knitr process chunks. recommended set label chunk option meaningful value, used name resulting image file system. list accepted options control export process, please see parse.options. Two additional options used function: eval set FALSE, engine execute   code chunk. diagram neither exported rendered   document. (Default: TRUE) include set FALSE, engine execute   code chunk (diagram therefore exported), result   rendered document. useful want   automatically export diagram manually use . (Default: TRUE)","code":""},{"path":"https://rchaput.github.io/knitrdrawio/reference/drawio.engine.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drawio engine for knitr — drawio.engine","text":"RMarkdown document, type following chunks. Simple chunk label (\"-diag1\"), source file (\"diag1.drawio\"): Setting output format: options, cropping result (.e., image size diagram), using transparent background, exporting 4th page diagram: Setting options manually engine.opts:","code":"```{drawio my-diag1, src=\"diag1.drawio\"} ``` ```{drawio my-diag2, src=\"diag2.drawio\", format=\"pdf\"} ``` ```{drawio my-diag3, src=\"diag3.drawio\", format=\"pdf\", crop=FALSE, transparent=TRUE, page.index=4} ``` ```{drawio my-diag4, src=\"diag4.drawio\", engine.opts=\"--embed-diagram --transparent\", format=\"pdf\"} ```"},{"path":"https://rchaput.github.io/knitrdrawio/reference/get.os.type.html","id":null,"dir":"Reference","previous_headings":"","what":"Get (simplified) Operating System type — get.os.type","title":"Get (simplified) Operating System type — get.os.type","text":"functions returns simple name current OS: \"Linux\", \"Darwin\", \"Windows\".","code":""},{"path":"https://rchaput.github.io/knitrdrawio/reference/get.os.type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get (simplified) Operating System type — get.os.type","text":"","code":"get.os.type()"},{"path":"https://rchaput.github.io/knitrdrawio/reference/hook.cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Hook function for caching drawio chunks — hook.cache","title":"Hook function for caching drawio chunks — hook.cache","text":"hook registered knitr automatically called user sets \"cache\" chunk option. chunk's engine \"drawio\", function compute MD5 checksum specified source file (\"src\" chunk option) add chunk options. knitr uses chunk options cache result chunk, means chunk re-executed long MD5 stays , .e., source diagram modified.","code":""},{"path":"https://rchaput.github.io/knitrdrawio/reference/hook.cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hook function for caching drawio chunks — hook.cache","text":"","code":"hook.cache(options)"},{"path":"https://rchaput.github.io/knitrdrawio/reference/hook.cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hook function for caching drawio chunks — hook.cache","text":"options chunk options","code":""},{"path":"https://rchaput.github.io/knitrdrawio/reference/hook.cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hook function for caching drawio chunks — hook.cache","text":"chunk options. updated additional value (source file's checksum), indexed cache.src.md5, engine set drawio cache option set TRUE.","code":""},{"path":"https://rchaput.github.io/knitrdrawio/reference/hook.cache.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hook function for caching drawio chunks — hook.cache","text":"called manually user, registered package loaded. previous hook registered cache option, hook first stored hook can call executed.","code":""},{"path":"https://rchaput.github.io/knitrdrawio/reference/is.headless.env.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect headless environments — is.headless.env","title":"Detect headless environments — is.headless.env","text":"functions detects whether code runs \"headless\" environment, .e., graphical server available.","code":""},{"path":"https://rchaput.github.io/knitrdrawio/reference/is.headless.env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect headless environments — is.headless.env","text":"","code":"is.headless.env()"},{"path":"https://rchaput.github.io/knitrdrawio/reference/is.headless.env.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Detect headless environments — is.headless.env","text":"draw.io application requires graphical server work, known limitation. However, headless environments Docker containers, CI/CD pipelines, remote server (SSH), etc., display. thus important able detect environments, order use workarounds prevent draw.io crashing. use 2 methods: xrandr tool available, use query configuration current display. xrandr find display, assume headless environment. Otherwise, resort simpler test: Linux, $DISPLAY environment variable controls display server used. empty, set, assume headless environment.","code":""},{"path":"https://rchaput.github.io/knitrdrawio/reference/is.headless.env.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Detect headless environments — is.headless.env","text":"methods, possible system available display, simply recognized time, e.g., incorrect configuration. especially case $DISPLAY set \"\". case, functions incorrectly believe headless environment. Users make sure system properly configured avoid . 2 proposed ways cover Windows Mac OS X. systems, headless detection certainly fail. default, consider headless environment: knitrdrawio engine thus invoke draw.io normally. Maybe, chance, work. worst possible outcome draw.io crashes, document rendering fail well.","code":""},{"path":"https://rchaput.github.io/knitrdrawio/reference/parse.options.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse Options — parse.options","title":"Parse Options — parse.options","text":"function used parse given chunk options build drawio command executed export diagram image.","code":""},{"path":"https://rchaput.github.io/knitrdrawio/reference/parse.options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse Options — parse.options","text":"","code":"parse.options(options)"},{"path":"https://rchaput.github.io/knitrdrawio/reference/parse.options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse Options — parse.options","text":"options list chunk options. Please see details list accepted options.","code":""},{"path":"https://rchaput.github.io/knitrdrawio/reference/parse.options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse Options — parse.options","text":"exe path draw.io executable binary. args list command line arguments passed drawio. output path image result execution `exe  args` (including cache directory, specified).","code":""},{"path":"https://rchaput.github.io/knitrdrawio/reference/parse.options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse Options — parse.options","text":"function executed drawio engine normally used directly user. List accepted options: (please see drawio's help details) src Path source diagram. Mandatory   argument, must null empty. format Format output image. Either \"pdf\",   \"png\", \"jpg\", \"svg\", \"vsdx\", \"xml\".   unspecified, default value set, depending current document   output: \"pdf\" used LaTeX, \"svg\" HTML,   \"png\" formats. engine.path Path draw.io executable. unspecified,   default value depends OS (please see   drawio.default.path details). engine.opts Optional arguments sent -drawio. Please   see drawio documentation list possible arguments. crop Whether crop result image . (Default: yes) transparent Whether set transparent background blank   background. Can used `format` \"pdf\". border Width border surrounding diagram. (Default: 0) page.index page export source diagram,   multiple pages available. page.range Similar `page.index`, allowing   multiple pages. Can used `format` \"pdf\". fig.path Path figure directory. default, resulting   images placed current working directory.","code":""},{"path":"https://rchaput.github.io/knitrdrawio/reference/wrap.xvfb.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a virtual display to run draw.io — wrap.xvfb","title":"Use a virtual display to run draw.io — wrap.xvfb","text":"draw.io application requires display work, exist environments (\"headless\"). case, can use xvfb emulate virtual display place physical display.","code":""},{"path":"https://rchaput.github.io/knitrdrawio/reference/wrap.xvfb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a virtual display to run draw.io — wrap.xvfb","text":"","code":"wrap.xvfb(command)"},{"path":"https://rchaput.github.io/knitrdrawio/reference/wrap.xvfb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a virtual display to run draw.io — wrap.xvfb","text":"command list represents command executed, non-headless environment. list result call parse.options. must following values: exe, args, output.","code":""},{"path":"https://rchaput.github.io/knitrdrawio/reference/wrap.xvfb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use a virtual display to run draw.io — wrap.xvfb","text":"exe path xvfb-run executable binary. args list command line arguments passed xvfb, including path draw.io executable, draw.io arguments, electron arguments headless mode. output path image result execution `exe  args` (including cache directory, specified). exactly value command argument.","code":""},{"path":"https://rchaput.github.io/knitrdrawio/reference/wrap.xvfb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use a virtual display to run draw.io — wrap.xvfb","text":"method checks xvfb-run can found, wraps command-line call draw.io call xvfb-run, additional parameters help draw.io work headless environments. returned value structure parse.options method: exe path executable (case, xvfb-run instead draw.io), args arguments, output left unchanged (path output file).","code":""}]
